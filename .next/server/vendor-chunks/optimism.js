"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/optimism";
exports.ids = ["vendor-chunks/optimism"];
exports.modules = {

/***/ "(ssr)/./node_modules/optimism/lib/cache.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/cache.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cache: () => (/* binding */ Cache)\n/* harmony export */ });\nfunction defaultDispose() {}\nclass Cache {\n    constructor(max = Infinity, dispose = defaultDispose){\n        this.max = max;\n        this.dispose = dispose;\n        this.map = new Map();\n        this.newest = null;\n        this.oldest = null;\n    }\n    has(key) {\n        return this.map.has(key);\n    }\n    get(key) {\n        const node = this.getNode(key);\n        return node && node.value;\n    }\n    getNode(key) {\n        const node = this.map.get(key);\n        if (node && node !== this.newest) {\n            const { older, newer } = node;\n            if (newer) {\n                newer.older = older;\n            }\n            if (older) {\n                older.newer = newer;\n            }\n            node.older = this.newest;\n            node.older.newer = node;\n            node.newer = null;\n            this.newest = node;\n            if (node === this.oldest) {\n                this.oldest = newer;\n            }\n        }\n        return node;\n    }\n    set(key, value) {\n        let node = this.getNode(key);\n        if (node) {\n            return node.value = value;\n        }\n        node = {\n            key,\n            value,\n            newer: null,\n            older: this.newest\n        };\n        if (this.newest) {\n            this.newest.newer = node;\n        }\n        this.newest = node;\n        this.oldest = this.oldest || node;\n        this.map.set(key, node);\n        return node.value;\n    }\n    clean() {\n        while(this.oldest && this.map.size > this.max){\n            this.delete(this.oldest.key);\n        }\n    }\n    delete(key) {\n        const node = this.map.get(key);\n        if (node) {\n            if (node === this.newest) {\n                this.newest = node.older;\n            }\n            if (node === this.oldest) {\n                this.oldest = node.newer;\n            }\n            if (node.newer) {\n                node.newer.older = node.older;\n            }\n            if (node.older) {\n                node.older.newer = node.newer;\n            }\n            this.map.delete(key);\n            this.dispose(node.value, key);\n            return true;\n        }\n        return false;\n    }\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2NhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxrQkFBbUI7QUFDckIsTUFBTUM7SUFDVEMsWUFBWUMsTUFBTUMsUUFBUSxFQUFFQyxVQUFVTCxjQUFjLENBQUU7UUFDbEQsSUFBSSxDQUFDRyxHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDRSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUM7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2xCO0lBQ0FDLElBQUlDLEdBQUcsRUFBRTtRQUNMLE9BQU8sSUFBSSxDQUFDTCxHQUFHLENBQUNJLEdBQUcsQ0FBQ0M7SUFDeEI7SUFDQUMsSUFBSUQsR0FBRyxFQUFFO1FBQ0wsTUFBTUUsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0g7UUFDMUIsT0FBT0UsUUFBUUEsS0FBS0UsS0FBSztJQUM3QjtJQUNBRCxRQUFRSCxHQUFHLEVBQUU7UUFDVCxNQUFNRSxPQUFPLElBQUksQ0FBQ1AsR0FBRyxDQUFDTSxHQUFHLENBQUNEO1FBQzFCLElBQUlFLFFBQVFBLFNBQVMsSUFBSSxDQUFDTCxNQUFNLEVBQUU7WUFDOUIsTUFBTSxFQUFFUSxLQUFLLEVBQUVDLEtBQUssRUFBRSxHQUFHSjtZQUN6QixJQUFJSSxPQUFPO2dCQUNQQSxNQUFNRCxLQUFLLEdBQUdBO1lBQ2xCO1lBQ0EsSUFBSUEsT0FBTztnQkFDUEEsTUFBTUMsS0FBSyxHQUFHQTtZQUNsQjtZQUNBSixLQUFLRyxLQUFLLEdBQUcsSUFBSSxDQUFDUixNQUFNO1lBQ3hCSyxLQUFLRyxLQUFLLENBQUNDLEtBQUssR0FBR0o7WUFDbkJBLEtBQUtJLEtBQUssR0FBRztZQUNiLElBQUksQ0FBQ1QsTUFBTSxHQUFHSztZQUNkLElBQUlBLFNBQVMsSUFBSSxDQUFDSixNQUFNLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQ0EsTUFBTSxHQUFHUTtZQUNsQjtRQUNKO1FBQ0EsT0FBT0o7SUFDWDtJQUNBSyxJQUFJUCxHQUFHLEVBQUVJLEtBQUssRUFBRTtRQUNaLElBQUlGLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNIO1FBQ3hCLElBQUlFLE1BQU07WUFDTixPQUFPQSxLQUFLRSxLQUFLLEdBQUdBO1FBQ3hCO1FBQ0FGLE9BQU87WUFDSEY7WUFDQUk7WUFDQUUsT0FBTztZQUNQRCxPQUFPLElBQUksQ0FBQ1IsTUFBTTtRQUN0QjtRQUNBLElBQUksSUFBSSxDQUFDQSxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUNBLE1BQU0sQ0FBQ1MsS0FBSyxHQUFHSjtRQUN4QjtRQUNBLElBQUksQ0FBQ0wsTUFBTSxHQUFHSztRQUNkLElBQUksQ0FBQ0osTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxJQUFJSTtRQUM3QixJQUFJLENBQUNQLEdBQUcsQ0FBQ1ksR0FBRyxDQUFDUCxLQUFLRTtRQUNsQixPQUFPQSxLQUFLRSxLQUFLO0lBQ3JCO0lBQ0FJLFFBQVE7UUFDSixNQUFPLElBQUksQ0FBQ1YsTUFBTSxJQUFJLElBQUksQ0FBQ0gsR0FBRyxDQUFDYyxJQUFJLEdBQUcsSUFBSSxDQUFDakIsR0FBRyxDQUFFO1lBQzVDLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQyxJQUFJLENBQUNaLE1BQU0sQ0FBQ0UsR0FBRztRQUMvQjtJQUNKO0lBQ0FVLE9BQU9WLEdBQUcsRUFBRTtRQUNSLE1BQU1FLE9BQU8sSUFBSSxDQUFDUCxHQUFHLENBQUNNLEdBQUcsQ0FBQ0Q7UUFDMUIsSUFBSUUsTUFBTTtZQUNOLElBQUlBLFNBQVMsSUFBSSxDQUFDTCxNQUFNLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQ0EsTUFBTSxHQUFHSyxLQUFLRyxLQUFLO1lBQzVCO1lBQ0EsSUFBSUgsU0FBUyxJQUFJLENBQUNKLE1BQU0sRUFBRTtnQkFDdEIsSUFBSSxDQUFDQSxNQUFNLEdBQUdJLEtBQUtJLEtBQUs7WUFDNUI7WUFDQSxJQUFJSixLQUFLSSxLQUFLLEVBQUU7Z0JBQ1pKLEtBQUtJLEtBQUssQ0FBQ0QsS0FBSyxHQUFHSCxLQUFLRyxLQUFLO1lBQ2pDO1lBQ0EsSUFBSUgsS0FBS0csS0FBSyxFQUFFO2dCQUNaSCxLQUFLRyxLQUFLLENBQUNDLEtBQUssR0FBR0osS0FBS0ksS0FBSztZQUNqQztZQUNBLElBQUksQ0FBQ1gsR0FBRyxDQUFDZSxNQUFNLENBQUNWO1lBQ2hCLElBQUksQ0FBQ04sT0FBTyxDQUFDUSxLQUFLRSxLQUFLLEVBQUVKO1lBQ3pCLE9BQU87UUFDWDtRQUNBLE9BQU87SUFDWDtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVybmktYXBwLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL2xpYi9jYWNoZS5qcz9iYzYzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGRlZmF1bHREaXNwb3NlKCkgeyB9XG5leHBvcnQgY2xhc3MgQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKG1heCA9IEluZmluaXR5LCBkaXNwb3NlID0gZGVmYXVsdERpc3Bvc2UpIHtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGRpc3Bvc2U7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLm5ld2VzdCA9IG51bGw7XG4gICAgICAgIHRoaXMub2xkZXN0ID0gbnVsbDtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0Tm9kZShrZXkpO1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlO1xuICAgIH1cbiAgICBnZXROb2RlKGtleSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUgIT09IHRoaXMubmV3ZXN0KSB7XG4gICAgICAgICAgICBjb25zdCB7IG9sZGVyLCBuZXdlciB9ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChuZXdlcikge1xuICAgICAgICAgICAgICAgIG5ld2VyLm9sZGVyID0gb2xkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2xkZXIpIHtcbiAgICAgICAgICAgICAgICBvbGRlci5uZXdlciA9IG5ld2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5vbGRlciA9IHRoaXMubmV3ZXN0O1xuICAgICAgICAgICAgbm9kZS5vbGRlci5uZXdlciA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLm5ld2VyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubmV3ZXN0ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlID09PSB0aGlzLm9sZGVzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMub2xkZXN0ID0gbmV3ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5nZXROb2RlKGtleSk7XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG5ld2VyOiBudWxsLFxuICAgICAgICAgICAgb2xkZXI6IHRoaXMubmV3ZXN0XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5ld2VzdCkge1xuICAgICAgICAgICAgdGhpcy5uZXdlc3QubmV3ZXIgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV3ZXN0ID0gbm9kZTtcbiAgICAgICAgdGhpcy5vbGRlc3QgPSB0aGlzLm9sZGVzdCB8fCBub2RlO1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuICAgIGNsZWFuKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5vbGRlc3QgJiYgdGhpcy5tYXAuc2l6ZSA+IHRoaXMubWF4KSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZSh0aGlzLm9sZGVzdC5rZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMubmV3ZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXdlc3QgPSBub2RlLm9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMub2xkZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbGRlc3QgPSBub2RlLm5ld2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUubmV3ZXIpIHtcbiAgICAgICAgICAgICAgICBub2RlLm5ld2VyLm9sZGVyID0gbm9kZS5vbGRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlLm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5vbGRlci5uZXdlciA9IG5vZGUubmV3ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShub2RlLnZhbHVlLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0RGlzcG9zZSIsIkNhY2hlIiwiY29uc3RydWN0b3IiLCJtYXgiLCJJbmZpbml0eSIsImRpc3Bvc2UiLCJtYXAiLCJNYXAiLCJuZXdlc3QiLCJvbGRlc3QiLCJoYXMiLCJrZXkiLCJnZXQiLCJub2RlIiwiZ2V0Tm9kZSIsInZhbHVlIiwib2xkZXIiLCJuZXdlciIsInNldCIsImNsZWFuIiwic2l6ZSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/context.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/context.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.bind),\n/* harmony export */   noContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.noContext),\n/* harmony export */   nonReactive: () => (/* binding */ nonReactive),\n/* harmony export */   parentEntrySlot: () => (/* binding */ parentEntrySlot),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.setTimeout)\n/* harmony export */ });\n/* harmony import */ var _wry_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/context */ \"(ssr)/./node_modules/@wry/context/lib/index.js\");\n\nconst parentEntrySlot = new _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction nonReactive(fn) {\n    return parentEntrySlot.withValue(void 0, fn);\n}\n //# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvQztBQUM3QixNQUFNQyxrQkFBa0IsSUFBSUQsOENBQUlBLEdBQUc7QUFDbkMsU0FBU0UsWUFBWUMsRUFBRTtJQUMxQixPQUFPRixnQkFBZ0JHLFNBQVMsQ0FBQyxLQUFLLEdBQUdEO0FBQzdDO0FBQ3lGLENBQ3pGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1cm5pLWFwcC8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvY29udGV4dC5qcz82OWU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsb3QgfSBmcm9tIFwiQHdyeS9jb250ZXh0XCI7XG5leHBvcnQgY29uc3QgcGFyZW50RW50cnlTbG90ID0gbmV3IFNsb3QoKTtcbmV4cG9ydCBmdW5jdGlvbiBub25SZWFjdGl2ZShmbikge1xuICAgIHJldHVybiBwYXJlbnRFbnRyeVNsb3Qud2l0aFZhbHVlKHZvaWQgMCwgZm4pO1xufVxuZXhwb3J0IHsgYmluZCBhcyBiaW5kQ29udGV4dCwgbm9Db250ZXh0LCBzZXRUaW1lb3V0LCBhc3luY0Zyb21HZW4sIH0gZnJvbSBcIkB3cnkvY29udGV4dFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiU2xvdCIsInBhcmVudEVudHJ5U2xvdCIsIm5vblJlYWN0aXZlIiwiZm4iLCJ3aXRoVmFsdWUiLCJiaW5kIiwiYmluZENvbnRleHQiLCJub0NvbnRleHQiLCJzZXRUaW1lb3V0IiwiYXN5bmNGcm9tR2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/dep.js":
/*!******************************************!*\
  !*** ./node_modules/optimism/lib/dep.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dep: () => (/* binding */ dep)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst EntryMethods = {\n    setDirty: true,\n    dispose: true,\n    forget: true\n};\nfunction dep(options) {\n    const depsByKey = new Map();\n    const subscribe = options && options.subscribe;\n    function depend(key) {\n        const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n        if (parent) {\n            let dep = depsByKey.get(key);\n            if (!dep) {\n                depsByKey.set(key, dep = new Set);\n            }\n            parent.dependOn(dep);\n            if (typeof subscribe === \"function\") {\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n                dep.unsubscribe = subscribe(key);\n            }\n        }\n    }\n    depend.dirty = function dirty(key, entryMethodName) {\n        const dep = depsByKey.get(key);\n        if (dep) {\n            const m = entryMethodName && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : \"setDirty\";\n            // We have to use arrayFromSet(dep).forEach instead of dep.forEach,\n            // because modifying a Set while iterating over it can cause elements in\n            // the Set to be removed from the Set before they've been iterated over.\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(dep).forEach((entry)=>entry[m]());\n            depsByKey.delete(key);\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n        }\n    };\n    return depend;\n} //# sourceMappingURL=dep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2RlcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDZ0M7QUFDL0UsTUFBTUksZUFBZTtJQUNqQkMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLFFBQVE7QUFDWjtBQUNPLFNBQVNDLElBQUlDLE9BQU87SUFDdkIsTUFBTUMsWUFBWSxJQUFJQztJQUN0QixNQUFNQyxZQUFZSCxXQUFXQSxRQUFRRyxTQUFTO0lBQzlDLFNBQVNDLE9BQU9DLEdBQUc7UUFDZixNQUFNQyxTQUFTZix3REFBZUEsQ0FBQ2dCLFFBQVE7UUFDdkMsSUFBSUQsUUFBUTtZQUNSLElBQUlQLE1BQU1FLFVBQVVPLEdBQUcsQ0FBQ0g7WUFDeEIsSUFBSSxDQUFDTixLQUFLO2dCQUNORSxVQUFVUSxHQUFHLENBQUNKLEtBQUtOLE1BQU0sSUFBSVc7WUFDakM7WUFDQUosT0FBT0ssUUFBUSxDQUFDWjtZQUNoQixJQUFJLE9BQU9JLGNBQWMsWUFBWTtnQkFDakNWLDZEQUFnQkEsQ0FBQ007Z0JBQ2pCQSxJQUFJYSxXQUFXLEdBQUdULFVBQVVFO1lBQ2hDO1FBQ0o7SUFDSjtJQUNBRCxPQUFPUyxLQUFLLEdBQUcsU0FBU0EsTUFBTVIsR0FBRyxFQUFFUyxlQUFlO1FBQzlDLE1BQU1mLE1BQU1FLFVBQVVPLEdBQUcsQ0FBQ0g7UUFDMUIsSUFBSU4sS0FBSztZQUNMLE1BQU1nQixJQUFJLG1CQUNOdkIsdURBQWNBLENBQUN3QixJQUFJLENBQUNyQixjQUFjbUIsbUJBQW9CQSxrQkFBa0I7WUFDNUUsbUVBQW1FO1lBQ25FLHdFQUF3RTtZQUN4RSx3RUFBd0U7WUFDeEVwQix5REFBWUEsQ0FBQ0ssS0FBS2tCLE9BQU8sQ0FBQ0MsQ0FBQUEsUUFBU0EsS0FBSyxDQUFDSCxFQUFFO1lBQzNDZCxVQUFVa0IsTUFBTSxDQUFDZDtZQUNqQlosNkRBQWdCQSxDQUFDTTtRQUNyQjtJQUNKO0lBQ0EsT0FBT0s7QUFDWCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1cm5pLWFwcC8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvZGVwLmpzPzNjZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyZW50RW50cnlTbG90IH0gZnJvbSBcIi4vY29udGV4dC5qc1wiO1xuaW1wb3J0IHsgaGFzT3duUHJvcGVydHksIG1heWJlVW5zdWJzY3JpYmUsIGFycmF5RnJvbVNldCwgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5jb25zdCBFbnRyeU1ldGhvZHMgPSB7XG4gICAgc2V0RGlydHk6IHRydWUsXG4gICAgZGlzcG9zZTogdHJ1ZSxcbiAgICBmb3JnZXQ6IHRydWUsIC8vIEZ1bGx5IHJlbW92ZSBwYXJlbnQgRW50cnkgZnJvbSBMUlUgY2FjaGUgYW5kIGNvbXB1dGF0aW9uIGdyYXBoXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGRlcChvcHRpb25zKSB7XG4gICAgY29uc3QgZGVwc0J5S2V5ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHN1YnNjcmliZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zdWJzY3JpYmU7XG4gICAgZnVuY3Rpb24gZGVwZW5kKGtleSkge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRFbnRyeVNsb3QuZ2V0VmFsdWUoKTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgbGV0IGRlcCA9IGRlcHNCeUtleS5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmICghZGVwKSB7XG4gICAgICAgICAgICAgICAgZGVwc0J5S2V5LnNldChrZXksIGRlcCA9IG5ldyBTZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LmRlcGVuZE9uKGRlcCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVVbnN1YnNjcmliZShkZXApO1xuICAgICAgICAgICAgICAgIGRlcC51bnN1YnNjcmliZSA9IHN1YnNjcmliZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRlcGVuZC5kaXJ0eSA9IGZ1bmN0aW9uIGRpcnR5KGtleSwgZW50cnlNZXRob2ROYW1lKSB7XG4gICAgICAgIGNvbnN0IGRlcCA9IGRlcHNCeUtleS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGRlcCkge1xuICAgICAgICAgICAgY29uc3QgbSA9IChlbnRyeU1ldGhvZE5hbWUgJiZcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wZXJ0eS5jYWxsKEVudHJ5TWV0aG9kcywgZW50cnlNZXRob2ROYW1lKSkgPyBlbnRyeU1ldGhvZE5hbWUgOiBcInNldERpcnR5XCI7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHVzZSBhcnJheUZyb21TZXQoZGVwKS5mb3JFYWNoIGluc3RlYWQgb2YgZGVwLmZvckVhY2gsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIG1vZGlmeWluZyBhIFNldCB3aGlsZSBpdGVyYXRpbmcgb3ZlciBpdCBjYW4gY2F1c2UgZWxlbWVudHMgaW5cbiAgICAgICAgICAgIC8vIHRoZSBTZXQgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBTZXQgYmVmb3JlIHRoZXkndmUgYmVlbiBpdGVyYXRlZCBvdmVyLlxuICAgICAgICAgICAgYXJyYXlGcm9tU2V0KGRlcCkuZm9yRWFjaChlbnRyeSA9PiBlbnRyeVttXSgpKTtcbiAgICAgICAgICAgIGRlcHNCeUtleS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIG1heWJlVW5zdWJzY3JpYmUoZGVwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGRlcGVuZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcC5qcy5tYXAiXSwibmFtZXMiOlsicGFyZW50RW50cnlTbG90IiwiaGFzT3duUHJvcGVydHkiLCJtYXliZVVuc3Vic2NyaWJlIiwiYXJyYXlGcm9tU2V0IiwiRW50cnlNZXRob2RzIiwic2V0RGlydHkiLCJkaXNwb3NlIiwiZm9yZ2V0IiwiZGVwIiwib3B0aW9ucyIsImRlcHNCeUtleSIsIk1hcCIsInN1YnNjcmliZSIsImRlcGVuZCIsImtleSIsInBhcmVudCIsImdldFZhbHVlIiwiZ2V0Iiwic2V0IiwiU2V0IiwiZGVwZW5kT24iLCJ1bnN1YnNjcmliZSIsImRpcnR5IiwiZW50cnlNZXRob2ROYW1lIiwibSIsImNhbGwiLCJmb3JFYWNoIiwiZW50cnkiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/dep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/entry.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/entry.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Entry: () => (/* binding */ Entry)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return(// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch(value.length){\n        case 0:\n            throw new Error(\"unknown value\");\n        case 1:\n            return value[0];\n        case 2:\n            throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nclass Entry {\n    constructor(fn){\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty) return;\n        this.dirty = true;\n        this.value.length = 0;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child)=>{\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(this.deps).forEach((dep)=>dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        } else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.withValue(entry, recomputeNewValue, [\n        entry,\n        args\n    ]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    // Set entry.value as unknown.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n    } catch (e) {\n        // If entry.fn throws, entry.value will become exceptional.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(child.parents);\n        for(let i = 0; i < parentCount; ++i){\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    } else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    } else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child)=>{\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        } catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n} //# sourceMappingURL=entry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/entry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/helpers.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayFromSet: () => (/* binding */ arrayFromSet),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   maybeUnsubscribe: () => (/* binding */ maybeUnsubscribe)\n/* harmony export */ });\nconst { hasOwnProperty } = Object.prototype;\nconst arrayFromSet = Array.from || function(set) {\n    const array = [];\n    set.forEach((item)=>array.push(item));\n    return array;\n};\nfunction maybeUnsubscribe(entryOrDep) {\n    const { unsubscribe } = entryOrDep;\n    if (typeof unsubscribe === \"function\") {\n        entryOrDep.unsubscribe = void 0;\n        unsubscribe();\n    }\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTSxFQUFFQSxjQUFjLEVBQUcsR0FBR0MsT0FBT0MsU0FBUyxDQUFDO0FBQzdDLE1BQU1DLGVBQWVDLE1BQU1DLElBQUksSUFDbEMsU0FBVUMsR0FBRztJQUNULE1BQU1DLFFBQVEsRUFBRTtJQUNoQkQsSUFBSUUsT0FBTyxDQUFDQyxDQUFBQSxPQUFRRixNQUFNRyxJQUFJLENBQUNEO0lBQy9CLE9BQU9GO0FBQ1gsRUFBRTtBQUNDLFNBQVNJLGlCQUFpQkMsVUFBVTtJQUN2QyxNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHRDtJQUN4QixJQUFJLE9BQU9DLGdCQUFnQixZQUFZO1FBQ25DRCxXQUFXQyxXQUFXLEdBQUcsS0FBSztRQUM5QkE7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVybmktYXBwLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL2xpYi9oZWxwZXJzLmpzPzJjMDQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHsgaGFzT3duUHJvcGVydHksIH0gPSBPYmplY3QucHJvdG90eXBlO1xuZXhwb3J0IGNvbnN0IGFycmF5RnJvbVNldCA9IEFycmF5LmZyb20gfHxcbiAgICBmdW5jdGlvbiAoc2V0KSB7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgICAgIHNldC5mb3JFYWNoKGl0ZW0gPT4gYXJyYXkucHVzaChpdGVtKSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlVW5zdWJzY3JpYmUoZW50cnlPckRlcCkge1xuICAgIGNvbnN0IHsgdW5zdWJzY3JpYmUgfSA9IGVudHJ5T3JEZXA7XG4gICAgaWYgKHR5cGVvZiB1bnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVudHJ5T3JEZXAudW5zdWJzY3JpYmUgPSB2b2lkIDA7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJhcnJheUZyb21TZXQiLCJBcnJheSIsImZyb20iLCJzZXQiLCJhcnJheSIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsIm1heWJlVW5zdWJzY3JpYmUiLCJlbnRyeU9yRGVwIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyTrie: () => (/* reexport safe */ _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie),\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.bindContext),\n/* harmony export */   defaultMakeCacheKey: () => (/* binding */ defaultMakeCacheKey),\n/* harmony export */   dep: () => (/* reexport safe */ _dep_js__WEBPACK_IMPORTED_MODULE_4__.dep),\n/* harmony export */   noContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.noContext),\n/* harmony export */   nonReactive: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.nonReactive),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.setTimeout),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ \"(ssr)/./node_modules/optimism/lib/cache.js\");\n/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entry.js */ \"(ssr)/./node_modules/optimism/lib/entry.js\");\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _dep_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dep.js */ \"(ssr)/./node_modules/optimism/lib/dep.js\");\n\n\n\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nfunction defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\n\nconst caches = new Set();\nfunction wrap(originalFunction, { max = Math.pow(2, 16), makeCacheKey = defaultMakeCacheKey, keyArgs, subscribe } = Object.create(null)) {\n    const cache = new _cache_js__WEBPACK_IMPORTED_MODULE_1__.Cache(max, (entry)=>entry.dispose());\n    const optimistic = function() {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new _entry_js__WEBPACK_IMPORTED_MODULE_2__.Entry(originalFunction));\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = ()=>cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!_context_js__WEBPACK_IMPORTED_MODULE_3__.parentEntrySlot.hasValue()) {\n            caches.forEach((cache)=>cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get () {\n            return cache[\"map\"].size;\n        },\n        configurable: false,\n        enumerable: false\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        makeCacheKey,\n        keyArgs,\n        subscribe\n    });\n    function dirtyKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return cache.delete(key);\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/index.js\n");

/***/ })

};
;